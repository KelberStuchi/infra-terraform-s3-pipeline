name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      aws-assume-role-arn:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      aws-statefile-s3-bucket:
        type: string
        required: true
      aws-lock-dynamodb-table:
        type: string
        required: true

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1. Clona o repositório
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configura as credenciais da AWS usando o Role do IAM
      #    (Substitua '123456789012' pelo ID da sua conta AWS)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: Github_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      # 3. Instala o Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5 # Use uma versão específica

      # 4. Inicializa o Terraform com o backend S3
      #    Passa as configurações do backend dinamicamente
      - name: Terraform Init
        id: init
        working-directory: ./infra
        run: |
          terraform init \
          -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
          -backend-config="key=${{ github.event.repository.name }}" \
          -backend-config="region=${{ inputs.aws-region }}" \
          -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"
        # run: |
        #   cd infra && terraform init \
        #   -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
        #   -backend-config="key=${{ github.event.repository.name }}" \
        #   -backend-config="region=${{ inputs.aws-region }}" \
        #   -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"

      - name: Terraform Validate
        run: terraform validate

      # 5. Gera o plano de execução do Terraform
      - name: Terraform Plan
        id: terraform-plan
        working-directory: ./infra
        run: |
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}
          terraform plan -var-file="envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"

        # run: |
        #   cd infra &&
        #   terraform workspace select ${{ inputs.environment }} &&
        #   terraform plan -var-file="envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"
        # run: |
        #   cd infra &&
        #   terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
        #   terraform plan -var-file="envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"

      # 6. Aplica as mudanças do Terraform (apenas em push para a 'main')
      - name: Terraform Apply
        id: terraform-apply
        working-directory: ./infra
        run: |
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}
          terraform plan -var-file="envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"

        # run: |
        #   cd infra &&
        #   terraform workspace select ${{ inputs.environment }} &&
        #   terraform apply "${{ inputs.environment }}.plan"

    # Matriz de estratégia para rodar para cada ambiente
    # strategy:
    #   matrix:
    #     # Adicione mais ambientes aqui se precisar
    #     env: [dev, prod]
